0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'publish', './' ]
2 info using npm@1.4.28
3 info using node@v0.10.37
4 verbose node symlink /usr/bin/node
5 verbose publish [ './' ]
6 verbose cache add [ './', null ]
7 verbose cache add name=undefined spec="./" args=["./",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: './',
8 verbose parsed url   path: './',
8 verbose parsed url   href: './' }
9 silly lockFile 0ee6c175- ./
10 verbose lock ./ /home/luciand/.npm/0ee6c175-.lock
11 verbose tar pack [ '/home/luciand/.npm/stream-dev-tools/1.0.3/package.tgz',
11 verbose tar pack   './' ]
12 verbose tarball /home/luciand/.npm/stream-dev-tools/1.0.3/package.tgz
13 verbose folder ./
14 info prepublish stream-dev-tools@1.0.3
15 silly lockFile 04cb2bca-tar tar://./
16 verbose lock tar://./ /home/luciand/.npm/04cb2bca-tar.lock
17 silly lockFile 7f73db03-ream-dev-tools-1-0-3-package-tgz tar:///home/luciand/.npm/stream-dev-tools/1.0.3/package.tgz
18 verbose lock tar:///home/luciand/.npm/stream-dev-tools/1.0.3/package.tgz /home/luciand/.npm/7f73db03-ream-dev-tools-1-0-3-package-tgz.lock
19 silly lockFile 04cb2bca-tar tar://./
20 silly lockFile 04cb2bca-tar tar://./
21 silly lockFile 7f73db03-ream-dev-tools-1-0-3-package-tgz tar:///home/luciand/.npm/stream-dev-tools/1.0.3/package.tgz
22 silly lockFile 7f73db03-ream-dev-tools-1-0-3-package-tgz tar:///home/luciand/.npm/stream-dev-tools/1.0.3/package.tgz
23 silly lockFile 0194f304-m-stream-dev-tools-1-0-3-package /home/luciand/.npm/stream-dev-tools/1.0.3/package
24 verbose lock /home/luciand/.npm/stream-dev-tools/1.0.3/package /home/luciand/.npm/0194f304-m-stream-dev-tools-1-0-3-package.lock
25 silly lockFile 0194f304-m-stream-dev-tools-1-0-3-package /home/luciand/.npm/stream-dev-tools/1.0.3/package
26 silly lockFile 0194f304-m-stream-dev-tools-1-0-3-package /home/luciand/.npm/stream-dev-tools/1.0.3/package
27 silly lockFile 0ee6c175- ./
28 silly lockFile 0ee6c175- ./
29 silly publish { name: 'stream-dev-tools',
29 silly publish   version: '1.0.3',
29 silly publish   description: 'npm package for developing VectorWatch stream',
29 silly publish   main: 'index.js',
29 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
29 silly publish   repository:
29 silly publish    { type: 'git',
29 silly publish      url: 'git clone https://github.com/luciand90/streams-dev-tools.git' },
29 silly publish   keywords: [ 'VectorWatch' ],
29 silly publish   author:
29 silly publish    { name: 'Lucian Diaconescu',
29 silly publish      email: 'diaconescu.lucian90@gmail.com' },
29 silly publish   license: 'MIT',
29 silly publish   dependencies:
29 silly publish    { 'body-parser': '1.9.0',
29 silly publish      ejs: '^1.0.0',
29 silly publish      express: '4.9.5',
29 silly publish      'express-myconnection': '*',
29 silly publish      'express-validator': '^2.6.0',
29 silly publish      mysql: '*',
29 silly publish      'node-promise': '^0.5.12',
29 silly publish      'node-schedule': '*',
29 silly publish      request: '*' },
29 silly publish   readme: 'Npm package for developing VectorWatch streams\n==============\nInstallation and Usage\n----------------------\n\nTo install the latest version available on NPM:\n\n    npm install stream-dev-tools --save\n\n    var sample_stream = require(\'stream-dev-tools\');\n    \n### Configuration\n\nThe developer must set a few things before he can get started:\n\n#### Properties:\n\n    //configJSON - provided by Vector.\n    sample_stream.config(configJSON);\n\n    \n#### Methods:\n\nThese are the methods that need to be implemented so the script can interact with VectorCloud.\n\n##### Public streams:\n\nA stream is considered public when it does not rely on any user info, only the settings are needed:\n\n###### - registerSettings(MANDATORY)\n\n       This function is called every time a user adds the stream to a watch face(and selects the desired settings, if needed).\n       The DB(if the stream has settings that need to be stored) is automatically updated.\n       When implementing this method the developer must call the \'resolve\' function parameter after he retrives/generates the data.\n       This will be the information displayed on the watch.\n            resolve({data:"..."});\n            \n       /**\n          * @param resolve {Function} DB insert success callback\n          * @param reject {Function} DB insert fail callback\n          * @param settings {Object} User settings. Example: {"City":"Bucharest", ...}\n          * @returns {null}\n          * */      \n     sample_stream.registerSettings = function (resolve, reject, settings) {};\n\n###### - unregisterSettings(Optional)\n    This function is called every time a user no longer has the stream on any watchface.\n    The DB(if the stream has settings that need to be stored) is automatically updated.\n    \n       /**\n           * @param resolve {Function} DB insert success callback\n           * @param reject {Function} DB insert fail callback\n           * @param settings {Object} User settings. Example: {"City":"Bucharest", ...}\n           * @returns {null}\n           * */  \n      sample_stream.unregisterSettings = function (resolve, reject, settings) {};    \n\n##### Private streams:\n\nA stream is considered private when the information generated and displayed on watch is user-based:\n\n###### - registerUser(MANDATORY)\n    \n     This function is called every time a user adds the stream to a watch face(and selects the desired settings, if needed).\n     The DB(if the stream has settings that need to be stored) is automatically updated.\n     When implementing this method the developer must call the \'resolve\' function parameter after he retrives/generates the data.\n          resolve({data:"..."});\n          \n     /**\n         * @param resolve {Function} DB insert success callback\n         * @param reject {Function} DB insert fail callback\n         * @param userId {int} User ID\n         * @param settings {Object} User settings. Example: {"City":"Bucharest", ...}\n         * @returns {null}\n         * */\n            (MANDATORY)\n     sample_stream.registerUser = function (resolve, reject, userId, settings) {};\n        \n###### - unregisterUser(Optional)\n\n     This function is called every time a user no longer has the stream on any watchface.\n     The DB(if the stream has settings that need to be stored) is automatically updated.\n     /** \n            * @param resolve {Function} DB insert success callback\n            * @param reject {Function} DB insert fail callback\n            * @param userId {int} User ID\n            * @param settings {Object} User settings. Example: {"City":"Bucharest", ...}\n            * @returns {null}\n            * */\n            (Optional)\n      ample_stream.unregisterUser = function (resolve, reject, userId, settings) {};\n\n----------------------    \n\n### Methods available\n\n#### startServer\n    Starts and configures the express framework.\n    /** \n         * @param initAction {Function} Called after the server starts listening.\n         * @returns {null}\n         * */\n    sample_stream.startServer(initAction);\n\n#### sendDeliverRequests\n    Sends update request to Vector Cloud, with all the information needed.\n    /**\n         * @param dataArray {Array} \n            Example: [{data:"Text_to_be_displayed", settingsItem:{...}}]\n            data(String) - The text that will be displayed on the watch.\n            settingsItem(Object) - The coresponding user settings. All the settings \n         * @returns {null}\n         * */\n    sample_stream.sendDeliverRequests(dataArray)\n\n#### retrieveSettings\n     Get all the settings stored in the DB. On success the resolve(settingsArray) method is called, otherwise the reject(error) method.\n     The developer can access the returned array in the resolve(settingsArray) callback, as a parameter.\n           Example: sample_stream.retrieveSettings(function (settingsArray) {\n                        console.log(settingsArray); -> [{"City":"Bucharest", ...},{"City":"New York", ...}, ...]\n                    });\n     /**\n         * @param resolve {Function} DB select success callback\n         * @param reject {Function} DB select fail callback\n         * @returns null\n         *\n         **/\n    sample_stream.retrieveSettings (resolve, reject);\n\n#### dbCleanUp\n    Delete al settings from the DB.\n     /**\n         * @param resolve {Function} DB update/delete success callback\n         * @param reject {Function} DB update/delete fail callback\n         * @returns null\n         *\n         **/\n    sample_stream.dbCleanUp (resolve, reject);\n  \n----------------------    \n    \n### Sample\n\n    var sample_stream = require(\'./index.js\');\n    var configJSON = {\n        streamUID: "***",\n        streamType: "public",\n        hasSettings: true,\n        token: "***",\n        portNumber: "3000",\n        database: {\n            host: "***",\n            user: "***",\n            password: "***",\n            database: "***"\n        }\n    };\n    sample_stream.config(configJSON);\n    sample_stream.debugMode = true;\n    \n    /*************Custom code**********/\n    var counter = 0;\n    function updateAll() {\n        sample_stream.retrieveSettings(function (settingsArray) {\n            var pushArray = [];\n            settingsArray.forEach(function (element) {\n                pushArray.push({data: getData(element), settingsItem: element});\n            });\n            sample_stream.sendDeliverRequests(pushArray);\n        });\n    }\n    \n    function getData(element) {\n        switch (element.OutputSettings) {\n            case \'positive\':\n                return counter;\n            case \'negative\':\n                return ((counter != 0) ? -counter : 0);\n            default:\n                return counter;\n        }\n    }\n    \n    sample_stream.registerSettings = function (resolve, reject, settings) {\n        console.log("Registering settings:");\n        console.log(settings);\n        counter++;\n        resolve({data: getData(settings)});\n    };\n    \n    sample_stream.startServer(function () {\n        console.log("Start");\n        //When the server starts, send the counter to all that are listening\n        updateAll();\n    });\n\n\n\n\n  ',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: '1c03b157995cb1e9d373f1452fb9443674b08f5d',
29 silly publish   _id: 'stream-dev-tools@1.0.3',
29 silly publish   _shasum: '3cdd171ee789fa0ddac0a52c219a03ff1d9f8f66',
29 silly publish   _from: './' }
30 verbose request where is /stream-dev-tools
31 verbose request registry https://registry.npmjs.org/
32 verbose request id d31c66cec8016bf2
33 verbose url raw /stream-dev-tools
34 verbose url resolving [ 'https://registry.npmjs.org/', './stream-dev-tools' ]
35 verbose url resolved https://registry.npmjs.org/stream-dev-tools
36 verbose request where is https://registry.npmjs.org/stream-dev-tools
37 info trying registry request attempt 1 at 13:50:23
38 http PUT https://registry.npmjs.org/stream-dev-tools
39 http 403 https://registry.npmjs.org/stream-dev-tools
40 verbose headers { 'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '95',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   date: 'Mon, 28 Sep 2015 10:50:24 GMT',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   connection: 'keep-alive',
40 verbose headers   'x-served-by': 'cache-fra1220-FRA',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1443437423.266799,VS0,VE1405' }
41 error publish Failed PUT 403
42 error Error: "You cannot publish over the previously published version 1.0.3." : stream-dev-tools
42 error     at RegClient.<anonymous> (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
42 error     at Request._callback (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
42 error     at Request.self.callback (/usr/lib/node_modules/npm/node_modules/request/request.js:236:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1142:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:1096:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:944:16
42 error     at process._tickCallback (node.js:448:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Linux 3.16.0-44-generic
45 error command "/usr/bin/node" "/usr/bin/npm" "publish" "./"
46 error cwd /home/luciand/workspace/streams/published_modules/stream-dev-tools
47 error node -v v0.10.37
48 error npm -v 1.4.28
49 verbose exit [ 1, true ]
